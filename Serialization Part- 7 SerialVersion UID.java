
												Serialization Part- 7||SerialVersion UID
											 =============================================
 
 ======================
  7. SerialVersion UID 
 ======================

 -> In serialization both sender and receiver need not be same persion, need not be use same machine and need not be 
	from same location, The persion may be different, The machines may be different and locations may be different.
	
 -> In serialization both sender and receiver should has .class file at the beginning only just state of object is 
	traveling from sender to receiver.

 -> At the time of serialization with every object sender side JVM will save a unique Identifier.

 -> JVM is responsible to generate this unique Identifier based on .class file.

 -> At the time of Deserialization receiver side JVM will compaire unique Identifier associated with object with local 
	class unique indentifier if both are matched then only Deserialization will be performed otherwise we will get 
	Runtime exception saying InvalidClassException.
 
 -> This unique identifier is nothing but SerialVersion UID.


 Problems of depending on default SerialVersion UID generated by JVM :
 
	1. Both sender and receiver should use same JVM with respect to vendor and platform and version otherwise receiver
	   unable to deserialize because different SerialVersion UIDs.
	   
	2. Both sender and receiver should use same .class file version. After serialization if there is any change in 
	   .class file at receiver side then receiver unable to deserialize.
	   
	3. To generate SerialVersion UID internally JVM may use complex algoirthm which may create performance problems.
	
	
	import java.io.*;
	public class Dog  implements Serializable
	{
		int i = 10;
		int j = 20;
		//int k = 30; line - 1
	}
	
	import java.io.*;
	class Sender
	{
		public static void main(String args[])throws Exception
		{
			Dog1 d1 = new Dog1();
			FileOutputStream fos = new FileOutputStream("baake.ser");
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(d1);
		}
	}
		
	import java.io.*;
	class Receiver
	{
		public static void main(String args[])throws Exception
		{
			FileInputStream fis = new FileInputStream("baake.ser");
			ObjectInputStream ois = new ObjectInputStream(fis);
			Dog1 d2 =(Dog1)ois.readObject();
			
			System.out.println(d2.i+"..."+d2.j);
			
		}
	} // output 10..20 
	
	- If uncomment line then we will get Runtime Exception saying InvalidClassException.
	
 -> We can solve above problems by configuring our own serialVersinUID.

 -> We can configuring our own serialVersinUID as follows:

		-------------------------------------------------
		|private static final long serialVersinUID = 1L;|
		-------------------------------------------------
	
	import java.io.*;
    public class Dog1  implements Serializable
    {
    	int i = 10;
    	int j = 20;
    	int k = 30;
    }
    
    import java.io.*;
    class Sender
    {
    	public static void main(String args[])throws Exception
    	{
    		Dog1 d1 = new Dog1();
    		FileOutputStream fos = new FileOutputStream("baake.ser");
    		ObjectOutputStream oos = new ObjectOutputStream(fos);
    		oos.writeObject(d1);
    	}
    }
    	
    import java.io.*;
    class Receiver
    {
    	public static void main(String args[])throws Exception
    	{
    		FileInputStream fis = new FileInputStream("baake.ser");
    		ObjectInputStream ois = new ObjectInputStream(fis);
    		Dog1 d2 =(Dog1)ois.readObject();
    		
    		System.out.println(d2.i+"..."+d2.j);
    		
    	}
    } // output 10..20 
	
	
	
	-> In this case sender and Receiver not required to maintain same JVM versions.
	
 NOte: 

	- Some IDE is prompt programmer to enter serialVersinUID explicitly.
	
	- Some IDE is may generate serialVersinUID automatically.
